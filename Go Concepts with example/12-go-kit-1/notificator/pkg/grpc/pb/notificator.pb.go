// Code generated by protoc-gen-go. DO NOT EDIT.
// source: notificator/pkg/grpc/pb/notificator.proto

package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type SendEmailRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SendEmailRequest) Reset()         { *m = SendEmailRequest{} }
func (m *SendEmailRequest) String() string { return proto.CompactTextString(m) }
func (*SendEmailRequest) ProtoMessage()    {}
func (*SendEmailRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_notificator_7fcd69da48e2dd15, []int{0}
}
func (m *SendEmailRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SendEmailRequest.Unmarshal(m, b)
}
func (m *SendEmailRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SendEmailRequest.Marshal(b, m, deterministic)
}
func (dst *SendEmailRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SendEmailRequest.Merge(dst, src)
}
func (m *SendEmailRequest) XXX_Size() int {
	return xxx_messageInfo_SendEmailRequest.Size(m)
}
func (m *SendEmailRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SendEmailRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SendEmailRequest proto.InternalMessageInfo

type SendEmailReply struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SendEmailReply) Reset()         { *m = SendEmailReply{} }
func (m *SendEmailReply) String() string { return proto.CompactTextString(m) }
func (*SendEmailReply) ProtoMessage()    {}
func (*SendEmailReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_notificator_7fcd69da48e2dd15, []int{1}
}
func (m *SendEmailReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SendEmailReply.Unmarshal(m, b)
}
func (m *SendEmailReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SendEmailReply.Marshal(b, m, deterministic)
}
func (dst *SendEmailReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SendEmailReply.Merge(dst, src)
}
func (m *SendEmailReply) XXX_Size() int {
	return xxx_messageInfo_SendEmailReply.Size(m)
}
func (m *SendEmailReply) XXX_DiscardUnknown() {
	xxx_messageInfo_SendEmailReply.DiscardUnknown(m)
}

var xxx_messageInfo_SendEmailReply proto.InternalMessageInfo

func init() {
	proto.RegisterType((*SendEmailRequest)(nil), "pb.SendEmailRequest")
	proto.RegisterType((*SendEmailReply)(nil), "pb.SendEmailReply")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// NotificatorClient is the client API for Notificator service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type NotificatorClient interface {
	SendEmail(ctx context.Context, in *SendEmailRequest, opts ...grpc.CallOption) (*SendEmailReply, error)
}

type notificatorClient struct {
	cc *grpc.ClientConn
}

func NewNotificatorClient(cc *grpc.ClientConn) NotificatorClient {
	return &notificatorClient{cc}
}

func (c *notificatorClient) SendEmail(ctx context.Context, in *SendEmailRequest, opts ...grpc.CallOption) (*SendEmailReply, error) {
	out := new(SendEmailReply)
	err := c.cc.Invoke(ctx, "/pb.Notificator/SendEmail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NotificatorServer is the server API for Notificator service.
type NotificatorServer interface {
	SendEmail(context.Context, *SendEmailRequest) (*SendEmailReply, error)
}

func RegisterNotificatorServer(s *grpc.Server, srv NotificatorServer) {
	s.RegisterService(&_Notificator_serviceDesc, srv)
}

func _Notificator_SendEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificatorServer).SendEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Notificator/SendEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificatorServer).SendEmail(ctx, req.(*SendEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Notificator_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Notificator",
	HandlerType: (*NotificatorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendEmail",
			Handler:    _Notificator_SendEmail_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "notificator/pkg/grpc/pb/notificator.proto",
}

func init() {
	proto.RegisterFile("notificator/pkg/grpc/pb/notificator.proto", fileDescriptor_notificator_7fcd69da48e2dd15)
}

var fileDescriptor_notificator_7fcd69da48e2dd15 = []byte{
	// 124 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xd2, 0xcc, 0xcb, 0x2f, 0xc9,
	0x4c, 0xcb, 0x4c, 0x4e, 0x2c, 0xc9, 0x2f, 0xd2, 0x2f, 0xc8, 0x4e, 0xd7, 0x4f, 0x2f, 0x2a, 0x48,
	0xd6, 0x2f, 0x48, 0xd2, 0x47, 0x12, 0xd7, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x2a, 0x48,
	0x52, 0x12, 0xe2, 0x12, 0x08, 0x4e, 0xcd, 0x4b, 0x71, 0xcd, 0x4d, 0xcc, 0xcc, 0x09, 0x4a, 0x2d,
	0x2c, 0x4d, 0x2d, 0x2e, 0x51, 0x12, 0xe0, 0xe2, 0x43, 0x12, 0x2b, 0xc8, 0xa9, 0x34, 0x72, 0xe1,
	0xe2, 0xf6, 0x43, 0x68, 0x17, 0x32, 0xe5, 0xe2, 0x84, 0x2b, 0x10, 0x12, 0xd1, 0x2b, 0x48, 0xd2,
	0x43, 0x37, 0x43, 0x4a, 0x08, 0x4d, 0xb4, 0x20, 0xa7, 0x32, 0x89, 0x0d, 0x6c, 0xad, 0x31, 0x20,
	0x00, 0x00, 0xff, 0xff, 0x47, 0xe4, 0xd8, 0xc1, 0xa3, 0x00, 0x00, 0x00,
}
